using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class NPCPerception : NPCController {

    #region Members
    private SphereCollider gAreaOfSight;
	private NPCController gController;
    public float gFieldAngle = 135f;
    public Transform gHead;
    #endregion

    #region UnityStates
    void Awake() {
		gController = GetComponent<NPCController> ();
        gController.Head = gHead;
        base.gCurrentlyPerceived = new Dictionary<NPCEntity, NPCState>();
        gAreaOfSight = GetComponent<SphereCollider>();
    }
    #endregion

    #region Implementation

    public void Perceive() {
        List<NPCEntity> toRemove = new List<NPCEntity>();
        foreach (KeyValuePair<NPCEntity, NPCState> entry in gCurrentlyPerceived) {
            if (!Visible(entry.Key.transform)) {
                toRemove.Add(entry.Key);
            }
            else {
                NPCAction a = entry.Value.CurrentAction;
                Debug.Log("I percieve: " + entry.Key + " doing "+ (a != null ? a.Name : " nothing"));
                Debug.DrawLine(gHead.position, entry.Key.BodyCenter, Color.green);
            }
        }
        foreach (NPCEntity e in toRemove)
            gCurrentlyPerceived.Remove(e);
        gController.CurrentlyPerceived = gCurrentlyPerceived;
    }

    #region Colliders
    void OnTriggerStay(Collider obj) {
        if (isPerceivable(obj.gameObject)) {
            NPCEntity entity = obj.gameObject.GetComponent<NPCEntity>();
            if (Visible(obj.transform) && !gCurrentlyPerceived.ContainsKey(entity)) {
                if(obj.GetComponent<NPCController>() != null)
                    gCurrentlyPerceived.Add(entity, entity.GetComponent<NPCController>().CurrentState);
            }
        }
    }
    #endregion

    #region Utilities

	private bool Visible(Transform pT) {
        if (InFieldOfView(pT) && Unblocked(pT)) {
            return true;
        }
        else {
            return false;
        }
	}

    private bool InFieldOfView(Transform pT) {
        Vector3 targDirection = pT.gameObject.GetComponent<NPCEntity>().BodyCenter - gHead.position;
        float targAngle = Vector3.Angle(targDirection, gHead.forward);
		bool inField = (targAngle <= (gFieldAngle * 0.5f) && Vector3.Distance(pT.position, transform.position) <= gAreaOfSight.radius);
		return inField;
    }

    private bool Unblocked(Transform pT) {
        Vector3 targDirection = pT.gameObject.GetComponent<NPCEntity>().BodyCenter - gHead.position;
        RaycastHit hit = new RaycastHit();
        if (Physics.Raycast(gHead.position, targDirection, out hit, gAreaOfSight.radius * 0.5f)) {
			if (hit.transform.gameObject == pT.gameObject) {
				return true;
			} else
				return false;
		} else
			return false;
    }

    private bool isPerceivable(GameObject o) {
        return o.GetComponent<NPCEntity>() != null;
    }

    #endregion

    #endregion
}
