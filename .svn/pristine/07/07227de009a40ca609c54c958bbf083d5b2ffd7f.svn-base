using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class NPCPerception : NPCController {

    #region Members
    private SphereCollider gAreaOfSight;
	private NPCController gController;
    public float gFieldAngle = 135f;
    public Transform gHead;
    #endregion

    #region UnityStates
    void Awake() {
		gController = GetComponent<NPCController> ();
        this.gCurrentlyPerceived = new List<GameObject>();
        gAreaOfSight = GetComponent<SphereCollider>();
    }
    #endregion

    #region Implementation

    public void Perceive() {
        Debug.Log("Agent: " + gController.Id + " is perceiving");
        for (int i = gCurrentlyPerceived.Count - 1; i >= 0; i--) {
            if (!Visible(gCurrentlyPerceived[i].transform)) {
                gCurrentlyPerceived.RemoveAt(i);
            }
            else {
                Debug.DrawLine(gHead.position, gCurrentlyPerceived[i].transform.position, Color.green);
            }
        }
    }

    #region Colliders
    void OnTriggerStay(Collider obj) {
		if (Visible(obj.transform) && !gCurrentlyPerceived.Contains(obj.gameObject)) {
        	gCurrentlyPerceived.Add(obj.gameObject);
        }
    }
    #endregion

    #region Utilities

    /// <summary>
	/// Transform is in range and unclocked.
	/// </summary>
	/// <param name="pT">P t.</param>
	private bool Visible(Transform pT) {
        if (InFieldOfView(pT) && Unblocked(pT)) {
            return true;
        }
        else {
            return false;
        }
	}

    /// <summary>
    /// Indicates wheter an object is visible or not for the NPC. 
    /// </summary>
    /// <param name="pT"></param>
    /// <returns>True if visible, false otherwise</returns>
    private bool InFieldOfView(Transform pT) {
        Vector3 targDirection = pT.position - gHead.position;
        float targAngle = Vector3.Angle(targDirection, gHead.forward);
        return (targAngle <= (gFieldAngle * 0.5f) && Vector3.Distance(pT.position, transform.position) <= gAreaOfSight.radius);
    }

    /// <summary>
    /// Is the target blocked by another gameobject.
    /// </summary>
    /// <param name="pT"></param>
    /// <returns></returns>
    private bool Unblocked(Transform pT) {
        Vector3 targDirection = pT.position - gHead.position;
        RaycastHit hit = new RaycastHit();
        if (Physics.Raycast (transform.position + transform.up, targDirection, out hit, gAreaOfSight.radius * 0.5f)) {
			if (hit.transform.gameObject == pT.gameObject) {
				return true;
			} else
				return false;
		} else
			return false;
    }

    #endregion

    #endregion
}
